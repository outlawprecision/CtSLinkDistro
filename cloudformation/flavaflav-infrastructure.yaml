AWSTemplateFormatVersion: "2010-09-09"
Description: "FlavaFlav - UO Outlands Guild Link Distribution System Infrastructure (Four-Table Architecture)"

Parameters:
  Environment:
    Type: String
    Default: "dev"
    AllowedValues: ["dev", "staging", "prod"]
    Description: "Environment name"

  DomainName:
    Type: String
    Default: ""
    Description: "Custom domain name (optional)"

  CertificateArn:
    Type: String
    Default: ""
    Description: "SSL Certificate ARN for custom domain (optional)"

  LambdaCodeBucket:
    Type: String
    Default: "sherwood-artifacts"
    Description: "S3 bucket containing Lambda deployment package"

  LambdaCodeKey:
    Type: String
    Default: ""
    Description: "S3 key for Lambda deployment package (auto-generated if not provided)"

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref DomainName, ""]]
  HasCertificate: !Not [!Equals [!Ref CertificateArn, ""]]
  HasLambdaCodeKey: !Not [!Equals [!Ref LambdaCodeKey, ""]]

Resources:
  # ==========================================
  # DynamoDB Tables (Four-Table Architecture)
  # ==========================================

  # 1. Members Table - Guild member profiles
  MembersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "flavaflav-members-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "discord_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "discord_id"
          KeyType: "HASH"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "Application"
          Value: "FlavaFlav"
        - Key: "TableType"
          Value: "Members"

  # 2. Inventory Table - Available mastery links
  InventoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "flavaflav-inventory-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "link_id"
          AttributeType: "S"
        - AttributeName: "is_available"
          AttributeType: "S" # Using string for boolean to work with GSI
        - AttributeName: "quality"
          AttributeType: "S"
        - AttributeName: "link_type"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "link_id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        # GSI1: Query available links by quality
        - IndexName: "availability-quality-index"
          KeySchema:
            - AttributeName: "is_available"
              KeyType: "HASH"
            - AttributeName: "quality"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
        # GSI2: Query by link type and quality
        - IndexName: "type-quality-index"
          KeySchema:
            - AttributeName: "link_type"
              KeyType: "HASH"
            - AttributeName: "quality"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "Application"
          Value: "FlavaFlav"
        - Key: "TableType"
          Value: "Inventory"

  # 3. Distributions Table - Audit trail of all distributions
  DistributionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "flavaflav-distributions-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "distribution_id"
          AttributeType: "S"
        - AttributeName: "member_id"
          AttributeType: "S"
        - AttributeName: "distributed_at"
          AttributeType: "S"
        - AttributeName: "distribution_date"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "distribution_id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        # GSI1: Query member's distribution history
        - IndexName: "member-date-index"
          KeySchema:
            - AttributeName: "member_id"
              KeyType: "HASH"
            - AttributeName: "distributed_at"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
        # GSI2: Query distributions by date
        - IndexName: "date-index"
          KeySchema:
            - AttributeName: "distribution_date"
              KeyType: "HASH"
            - AttributeName: "distributed_at"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "Application"
          Value: "FlavaFlav"
        - Key: "TableType"
          Value: "Distributions"

  # 4. Lists Table - Distribution lists management
  ListsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "flavaflav-lists-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "list_id"
          AttributeType: "S"
        - AttributeName: "is_active"
          AttributeType: "S" # Using string for boolean to work with GSI
        - AttributeName: "quality"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "list_id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        # GSI1: Query active lists by quality
        - IndexName: "active-quality-index"
          KeySchema:
            - AttributeName: "is_active"
              KeyType: "HASH"
            - AttributeName: "quality"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "Application"
          Value: "FlavaFlav"
        - Key: "TableType"
          Value: "Lists"

  # ==========================================
  # IAM Role for Lambda
  # ==========================================
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "flavaflav-lambda-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                Resource:
                  # Members table and indexes
                  - !GetAtt MembersTable.Arn
                  - !Sub "${MembersTable.Arn}/index/*"
                  # Inventory table and indexes
                  - !GetAtt InventoryTable.Arn
                  - !Sub "${InventoryTable.Arn}/index/*"
                  # Distributions table and indexes
                  - !GetAtt DistributionsTable.Arn
                  - !Sub "${DistributionsTable.Arn}/index/*"
                  # Lists table and indexes
                  - !GetAtt ListsTable.Arn
                  - !Sub "${ListsTable.Arn}/index/*"

  # ==========================================
  # Lambda Function
  # ==========================================
  FlavaFlavLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "flavaflav-api-${Environment}"
      Runtime: provided.al2
      Handler: bootstrap
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !If
          - HasLambdaCodeKey
          - !Ref LambdaCodeKey
          - !Sub "flavaflav/lambda/flavaflav-lambda-${Environment}.zip"
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          REGION: !Ref "AWS::Region"
          ENVIRONMENT: !Ref Environment
          # Four table names
          DYNAMODB_MEMBERS_TABLE: !Ref MembersTable
          DYNAMODB_INVENTORY_TABLE: !Ref InventoryTable
          DYNAMODB_DISTRIBUTIONS_TABLE: !Ref DistributionsTable
          DYNAMODB_LISTS_TABLE: !Ref ListsTable
          # Legacy variable for backward compatibility (will be removed)
          DYNAMODB_TABLE: !Ref MembersTable
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "Application"
          Value: "FlavaFlav"

  # ==========================================
  # API Gateway
  # ==========================================
  FlavaFlavApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "flavaflav-api-${Environment}"
      Description: "FlavaFlav API Gateway"
      EndpointConfiguration:
        Types:
          - REGIONAL
      Policy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: execute-api:Invoke
            Resource: "*"

  # Lambda Permission for API Gateway
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FlavaFlavLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FlavaFlavApi}/*/*"

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiProxyMethod
      - ApiProxyOptionsMethod
      - ApiRootMethod
      - ApiRootOptionsMethod
    Properties:
      RestApiId: !Ref FlavaFlavApi
      StageName: !Ref Environment

  # API Gateway Resource (Proxy)
  ApiProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FlavaFlavApi
      ParentId: !GetAtt FlavaFlavApi.RootResourceId
      PathPart: "{proxy+}"

  # API Gateway Method (Proxy)
  ApiProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FlavaFlavApi
      ResourceId: !Ref ApiProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FlavaFlavLambda.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway OPTIONS Method for Proxy (CORS preflight)
  ApiProxyOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FlavaFlavApi
      ResourceId: !Ref ApiProxyResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Method for Root
  ApiRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FlavaFlavApi
      ResourceId: !GetAtt FlavaFlavApi.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FlavaFlavLambda.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway OPTIONS Method for Root (CORS preflight)
  ApiRootOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FlavaFlavApi
      ResourceId: !GetAtt FlavaFlavApi.RootResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # ==========================================
  # S3 Bucket for Static Files
  # ==========================================
  StaticFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "flavaflav-static-${Environment}-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ["*"]
            MaxAge: 3600

  # S3 Bucket Policy
  StaticFilesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticFilesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${StaticFilesBucket}/*"

  # ==========================================
  # CloudFront Distribution
  # ==========================================
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub "FlavaFlav CDN - ${Environment}"
        DefaultRootObject: index.html
        Aliases: !If
          - HasCustomDomain
          - [!Ref DomainName]
          - !Ref "AWS::NoValue"
        ViewerCertificate: !If
          - HasCertificate
          - AcmCertificateArn: !Ref CertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true
        Origins:
          - Id: S3Origin
            DomainName: !Sub "${StaticFilesBucket}.s3-website-${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
          - Id: ApiGatewayOrigin
            DomainName: !Sub "${FlavaFlavApi}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: ""
            CustomOriginConfig:
              HTTPPort: 443
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
          DefaultTTL: 86400
          MaxTTL: 31536000
        CacheBehaviors:
          - PathPattern: "/api/*"
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
            CachedMethods: [GET, HEAD, OPTIONS]
            ForwardedValues:
              QueryString: true
              Headers:
                - Authorization
                - Content-Type
                - X-Requested-With
                - Accept
                - Origin
                - Referer
              Cookies:
                Forward: all
            Compress: false
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300

  # ==========================================
  # CloudWatch Resources
  # ==========================================
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/flavaflav-api-${Environment}"
      RetentionInDays: 14

  # CloudWatch Alarms
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "flavaflav-lambda-errors-${Environment}"
      AlarmDescription: "Lambda function errors"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref FlavaFlavLambda

  DynamoDBThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "flavaflav-dynamodb-throttles-${Environment}"
      AlarmDescription: "DynamoDB throttling events"
      MetricName: ThrottledRequests
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: TableName
          Value: !Ref MembersTable

# ==========================================
# Outputs
# ==========================================
Outputs:
  ApiGatewayUrl:
    Description: "API Gateway URL"
    Value: !Sub "https://${FlavaFlavApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"

  CloudFrontUrl:
    Description: "CloudFront Distribution URL"
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontUrl"

  CustomDomainUrl:
    Condition: HasCustomDomain
    Description: "Custom Domain URL"
    Value: !Sub "https://${DomainName}"
    Export:
      Name: !Sub "${AWS::StackName}-CustomDomainUrl"

  MembersTableName:
    Description: "DynamoDB Members Table Name"
    Value: !Ref MembersTable
    Export:
      Name: !Sub "${AWS::StackName}-MembersTableName"

  InventoryTableName:
    Description: "DynamoDB Inventory Table Name"
    Value: !Ref InventoryTable
    Export:
      Name: !Sub "${AWS::StackName}-InventoryTableName"

  DistributionsTableName:
    Description: "DynamoDB Distributions Table Name"
    Value: !Ref DistributionsTable
    Export:
      Name: !Sub "${AWS::StackName}-DistributionsTableName"

  ListsTableName:
    Description: "DynamoDB Lists Table Name"
    Value: !Ref ListsTable
    Export:
      Name: !Sub "${AWS::StackName}-ListsTableName"

  S3BucketName:
    Description: "S3 Bucket for Static Files"
    Value: !Ref StaticFilesBucket
    Export:
      Name: !Sub "${AWS::StackName}-S3Bucket"

  LambdaFunctionName:
    Description: "Lambda Function Name"
    Value: !Ref FlavaFlavLambda
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunction"
